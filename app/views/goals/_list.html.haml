-# This file is part of Thinks.

-# Thinks is free software: you can redistribute it and/or modify
-# it under the terms of the GNU Affero Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.

-# Thinks is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Affero Public License for more details.

-# You should have received a copy of the GNU Affero Public License
-# along with Thinks.  If not, see <http://www.gnu.org/licenses/>.

-# Copyright (c) 2015, Claudio Maradonna

.collapse#collapseSearch{ class: any_filter?(params[:filters]) ? 'in' : '' }
  = smart_listing_controls_for :goals do
    .input-group.form-group
      %span.input-group-btn
        = link_to url_for, class: 'btn btn-default', title: t("reset_filters"), remote: true do
          = icon('undo', class: 'dark-grey')
      = text_field_tag 'filters[search_title_and_description]', filter_value(:search_title_and_description), :class => 'form-control', autocomplete: 'off'
      %span.input-group-btn

        - if @active_filters.present?
          %a.hidden-xs.btn.btn-default{ role: "button", 'data-toggle': 'collapse', 'aria-expanded': any_filter?(params[:filters]) ? 'true' : 'false', 'aria-controls': 'collapseFilters', href: '#collapseFilters' }
            = icon('filter', class: 'dark-grey')
        %button.btn.btn-primary{ type: 'submit' }
          = icon('search', class: 'fa-inverse')
    = render partial: 'shared/filters', :locals => { :filters => @active_filters }

%table.table.table-condensed.table-hover#filterrific_results
  %thead
    %tr
      %td.col-lg-10.col-md-10.col-sm-9.col-xs-9
        .col-xs-3
          %h5
            %strong
              = t "goal"
  %tbody
    - unless smart_listing.empty?
      - smart_listing.collection.each do |goal|
        %tr
          %td
            %a.pull-right.btn.hidden-xs{ :class => goal.tasks.empty? ? "disabled" : "", :href => goal.tasks.empty? ? "javascript:;" : project_tasks_path(goal.project, "filterrific[with_goal]" => goal), :title => tasks_title(goal) , :role => "button" }
              = icon('tasks', :class => "dark-grey")
            - if current_thinker == goal.project.thinker
              - tasks_ready = goal.tasks.ready_to_sprint
              %a.pull-right.btn.hidden-xs{ :class => tasks_ready.empty? ? "disabled" : "", :href => tasks_ready.empty? ? "javascript:;" : tasks_in_sprint_goal_path(goal), :title => release_btn_title(tasks_ready) , :role => "button", "data-method" => :put }
                = icon('flag-checkered', :class => "dark-grey")
            %strong.hidden-xs.hidden-sm
              %small.dark-grey
                = goal.updated_at.to_s(:short)
                Â·
              = link_to goal.title.truncate(40), goal_path(goal), :title => goal.title
            %strong.visible-xs
              = link_to goal.title.truncate(50), goal_path(goal), :title => goal.title
            %strong.visible-sm
              = link_to goal.title, goal_path(goal)
            .dark-grey.break-word
              %small
                %em
                  = highlights_searched_text(plain_text(goal.description).truncate(150), @search)
                .progress
                  .progress-bar{"aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow" => "#{goal.progress}", :class => "#{progress_bar_color(goal.progress)}", :role => "progressbar", :style => "min-width: 3em; width: #{goal.progress}%;"}
                    = goal.progress
                    \%
    - else
      %tr.warning
        %td.text-center
          %strong
            No records found

= smart_listing.paginate
= smart_listing.pagination_per_page_links
