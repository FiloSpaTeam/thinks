-# This file is part of Thinks.

-# Thinks is free software: you can redistribute it and/or modify
-# it under the terms of the GNU Affero Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.

-# Thinks is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Affero Public License for more details.

-# You should have received a copy of the GNU Affero Public License
-# along with Thinks.  If not, see <http://www.gnu.org/licenses/>.

-# Copyright (c) 2015, Claudio Maradonna

.panel.panel-default.hidden-xs
  .panel-body
    - if project.started? && !project.suspended
      - if project.cycle.try(:days)
        .progress
          %div{"aria-valuemax" => "#{project.cycle.days}", "aria-valuemin" => "1", "aria-valuenow" => "#{project.actual_day_of_sprint}", :class => "progress-bar #{progress_bar_color(project.days_percentage)}", :role => "progressbar", :style => "min-width: 2em; width: #{project.days_percentage}%;"}
      Sprint
      = project.sprint.serial
    - elsif project.suspended
      %strong.text-danger
        Development suspended
    - elsif project.countdown < 0
      = t("release_date_not_defined_yet")
    - else
      = project.countdown
      days left to start

  .panel-body
    - if project.tasks.size.nonzero?
      .progress.visible-xs
        .progress-bar.progress-bar-info{ style: "width: #{percentage_from_value_and_total(project.tasks.release.size, project.tasks.size)}%;" }
        .progress-bar.progress-bar-danger{ style: "width: #{percentage_from_value_and_total(project.tasks.in_sprint.size, project.tasks.size)}%;" }
        .progress-bar.progress-bar-warning{ style: "width: #{percentage_from_value_and_total(project.tasks.in_progress.size, project.tasks.size)}%;" }
        .progress-bar.progress-bar-success{ style: "width: #{percentage_from_value_and_total(project.tasks.done.size, project.tasks.size)}%;" }
    %strong
      = link_to project_tasks_path(project) do
        = pluralize project.tasks.size, 'task'
    .hidden-xs
      - if project.tasks.size.nonzero?
        = pie_chart Status.all.order(:id).map { |status| [t("projects.tasks.#{status.translation_code}"), project.tasks.where(status: status).count] }, height: "180px", library: { chartArea: { height: '100%', width: '92%' }, legend: { position: 'right', alignment: 'center' }, colors: [ '#607d8b', '#2196f3', '#f44336', '#ffc107', '#43a047' ] }

  - if project.started?
    .panel-body.hidden-xs
      %strong
        Workload

    .list-group.hidden-xs
      - if project.sprints.size.nonzero?
        .list-group-item
          Burn up
          - total_workload = 0
          - last_sprint    = project.sprint
          - burn_up_data   = project.tasks.unscoped.done.group_by_period(:day, :end_at).where('end_at >= ?', last_sprint.created_at).order('max(end_at)').sum(:workload)
          - if burn_up_data.empty?
            - burn_up_data = { last_sprint.created_at => 0 }
          - burn_up_data = burn_up_data.transform_keys { |key| key.strftime('%B %d') }
          = area_chart burn_up_data.each { |key, value| burn_up_data[key] = total_workload += value }, library: { chartArea: { left: 40, width: '82%', height: '90%' }, hAxis: { textPosition: 'none' }, pointSize: 8 }

      .list-group-item
        = badge(project.tasks.where('status_id = ? or status_id = ?', Status.in_progress.first, Status.sprint.first).sum(:workload))
        in sprint
      .list-group-item
        = badge(project.tasks.done.with_sprint(project.sprint.id).sum(:workload))
        done (sprint)
      .list-group-item
        = badge(project.tasks.done.sum(:workload))
        done (total)
      .list-group-item
        = badge(project.tasks.average(:standard_deviation).try(:round, 2))
        average standard deviation
