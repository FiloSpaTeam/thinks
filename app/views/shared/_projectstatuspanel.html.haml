.panel.panel-default
  .panel-body
    %strong
      Project
    .progress
      %div{"aria-valuemax" => "#{project.cycle.days}", "aria-valuemin" => "1", "aria-valuenow" => "#{project.actual_day_of_sprint}", :class => "progress-bar #{progress_bar_color(project.days_percentage)}", :role => "progressbar", :style => "min-width: 2em; width: #{project.days_percentage}%;"}
    - if project.started?
      Sprint
      = project.sprint
    - elsif project.countdown < 0
      = t("release_date_not_defined_yet")
    - else
      = project.countdown
      days left to start

  - if project.started?
    .panel-body
      %strong
        = link_to "Tasks", project_tasks_path(project)
      .progress
        .progress-bar.progress-bar-info{ style: "width: #{percentage_from_value_and_total(project.tasks.release.size, project.tasks.size)}%;" }
        .progress-bar.progress-bar-danger{ style: "width: #{percentage_from_value_and_total(project.tasks.in_sprint.size, project.tasks.size)}%;" }
        .progress-bar.progress-bar-warning{ style: "width: #{percentage_from_value_and_total(project.tasks.in_progress.size, project.tasks.size)}%;" }
        .progress-bar.progress-bar-success{ style: "width: #{percentage_from_value_and_total(project.tasks.done.size, project.tasks.size)}%;" }
      =pluralize project.tasks.size, 'task'

    .list-group.hidden-xs.hidden-sm
      .list-group-item
        = badge(project.tasks.size)
        total
      .list-group-item
        = badge(project.tasks.release.size)
        in release
      .list-group-item
        = badge(project.tasks.in_sprint.size)
        ready for work
      .list-group-item
        = badge(project.tasks.in_progress.size)
        in progress
      .list-group-item
        = badge(project.tasks.done.size)
        done


    .panel-body.hidden-xs.hidden-sm
      %strong
        Workload

    .list-group.hidden-xs.hidden-sm
      .list-group-item
        = badge(project.tasks.where('status_id = ? or status_id = ?', Status.in_progress.first, Status.sprint.first).sum(:workload))
        current
      .list-group-item
        = badge(project.tasks.done.sum(:workload))
        done
      .list-group-item
        = badge(project.tasks.average(:standard_deviation).try(:round, 2))
        average standard deviation
