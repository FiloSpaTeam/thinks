.dropdown{ :role => "presentation", :class => active_filter?(:last, "filters[thinker_name]") ? 'open' : '' }
  %button.btn.btn-default.dropdown-toggle.mr-1{ "data-toggle" => "dropdown", :role => "button", "aria-haspopup" => "true", "aria-expanded" => "false" }
    = t("filters.#{Enums::FiltersNames::THINKER}")
    %span.caret
  .dropdown-menu.dropdown-filters-menu.p-0
    .dropdown-header.pl-3.pr-3
      .input-group.input-group-sm
        - if active_filter?(Enums::FiltersNames::THINKER)
          .input-group-prepend
            = link_to url_for(url_for_filter('', '', [Enums::FiltersNames::THINKER])), :class => "btn btn-danger", :remote => true do
              %i.fa.fa-undo.text-light
        = text_field_tag 'filters[thinker_name]', filter_value(:thinker_name), class: 'form-control-sm form-control', placeholder: t("search"), autocomplete: 'off'
        .input-group-append
          %button.btn.btn-outline-secondary{ type: "submit" }
            %i.fa.fa-search
    %ul.list-group.scrollbar
      - if @project_thinkers.present?
        - if active_filter?(:thinker_name)
          - @project_thinkers = @project_thinkers.where("lower(name) LIKE '%#{params[:filters][:thinker_name].downcase.strip}%'")
        - @project_thinkers.each do |thinker|
          = link_to url_for(url_for_filter(Enums::FiltersNames::THINKER, thinker.slug, [:thinker_name, :last])), :class => "rounded-0 border-right-0 border-left-0 border-bottom-0 list-group-item #{ active_filter?(Enums::FiltersNames::THINKER, thinker.slug) ? 'list-group-item-info' : '' }", :remote => true do
            = highlights_searched_text(thinker.name, filter_value(:thinker_name))
        - if @project_thinkers.empty?
          %li.list-group-item.list-group-item-danger.rounded-0.border-right-0.border-left-0.border-bottom-0
            %strong
              = t('filters.no_results')
      - else
        - contributions_filter = @project.contributions.joins(:thinker)
        - if active_filter?(:thinker_name)
          - contributions_filter = contributions_filter.where("lower(thinkers.name) LIKE '%#{params[:filters][:thinker_name].downcase.strip}%'")
        - contributions_filter.each do |contribution|
          - thinker = contribution.thinker
          = link_to url_for(url_for_filter(Enums::FiltersNames::THINKER, thinker.slug, [:thinker_name, :last])), :class => "rounded-0 border-right-0 border-left-0 border-bottom-0 list-group-item #{ active_filter?(Enums::FiltersNames::THINKER, thinker.slug) ? 'list-group-item-info' : '' }", :remote => true do
            = highlights_searched_text(thinker.name, filter_value(:thinker_name))
        - if contributions_filter.empty?
          %li.list-group-item.list-group-item-danger.rounded-0.border-right-0.border-left-0.border-bottom-0
            %strong
              = t('filters.no_results')
