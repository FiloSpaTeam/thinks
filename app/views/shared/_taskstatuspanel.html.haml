-# This file is part of Thinks.

-# Thinks is free software: you can redistribute it and/or modify
-# it under the terms of the GNU Affero Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.

-# Thinks is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Affero Public License for more details.

-# You should have received a copy of the GNU Affero Public License
-# along with Thinks.  If not, see <http://www.gnu.org/licenses/>.

-# Copyright (c) 2015, Claudio Maradonna

.panel.panel-default.visible-xs
  .panel-body
    .col-xs-4
      %label.control-label
        Goal
      = goal_button(task)
    .col-xs-3.text-center{ style: 'padding-top: 6px;' }
      .round-sm.pull-right{ :class => "bg-#{color_list_round_div(task.status.translation_code)}" }
      %label.control-label
        Status
    .col-xs-4.col-xs-offset-1.text-right{ style: 'padding-top: 6px;' }
      %label.control-label
        Workload
      = workload_description(task)
.panel.panel-default.hidden-xs
  .list-group
    .list-group-item
      %strong
        Release
      %span.pull-right
        - if task.release.present?
          = link_to task.release.title.truncate(20), release_path(task.release), :title => task.release.title
        - else
          = t("not_defined_yet")
    .list-group-item
      %strong
        Goal
      %span.pull-right
        - if task.goal.present?
          = link_to task.goal.title.truncate(20), goal_path(task.goal), :title => task.goal.title
        - else
          = t("not_defined_yet")
    .list-group-item
      %strong
        = t('tasks.status')
      %span.pull-right
        - if task.deleted?
          = t('closed')
        - else
          .round-sm.pull-left{ :class => "bg-#{color_list_round_div(task.status.translation_code)}" }
          = t("projects.tasks.#{task.status.translation_code}")
  - if (scrum_master?(task.project))
    - if task.status == Status.release.first
      .panel-footer
        - if task.ready?
          = link_to "Get in Sprint!", sprint_task_path(task), :method => :put, :class => "btn btn-primary btn-block"
        - else
          %strong
            = link_to "Force in Sprint!", sprint_task_path(task), :method => :put, :class => "btn btn-warning btn-block"
            = t(".standard_deviation_too_high")
    - elsif task.status == Status.backlog.first && task.workloads.count > 0
      .panel-footer
        = link_to "Force in Release", release_task_path(task), :method => :put, :class => "btn btn-warning btn-block"
    - elsif task.status == Status.done.first
      .panel-footer
        = link_to "Back to release", release_task_path(task), :method => :put, :class => "btn btn-danger btn-block"

.panel.panel-default
  .list-group
    .list-group-item.hidden-xs
      %strong
        = t('tasks.workload')
      %span.pull-right
        = workload_description(task)
  - if task.contributed?(current_thinker) && !task.deleted?
    .panel-footer
      - if workload_voted.nil?
        - if !task.in_progress? && !task.done?
          = form_for task, :url => judge_task_path(task), method: :put do |f|
            .form-group
              = f.label :workload, t('.define_workload'), class: "control-label"
              = f.select :workload, options_from_collection_for_select(Workload.all, :id, :description), {}, :class => "form-control"
            = f.submit t("submit"), :class => "btn btn-primary"
        - else
          %strong
            = t ".you_cannot_vote"
      - else
        .text-right
          %strong
            = t "tasks.show.you_voted", vote: workload_voted.workload.value
  .list-group.hidden-xs
    .list-group-item
      %strong
        = t('tasks.worker')
      - if !task.worker.nil?
        %span.pull-right{ :title => task.worker.name }
          = task.worker.name.try(:truncate, 20)
        - if (task.worker == current_thinker || scrum_master?(task.project)) && task.status != Status.done.first
          %strong
            = link_to "Give up work", give_up_task_path(task), :method => :put, :data => {confirm: "Are you sure you want to give up work?"}, :class => "btn btn-danger btn-block"
      - elsif task.status == Status.sprint.first
        - if current_thinker.working_tasks.in_progress.present?
          %h4 No one is working over this but you have yet something to do ;-P
        - elsif !task.project.started?
          %h4 The project is not started yet, wait. Your moment will come soon.
        - elsif task.workloads.size.nonzero?
          = link_to "Assigns me", assign_task_path(task), :method => :put, :class => "btn btn-success btn-block"
        - else
          %h4 There are no opinions about this task. Share with a comment and vote!
      - else
        %h4 Actually the team didn't decide to work on. Talk about if you are interested
    .list-group-item
      %strong
        Operations
      = link_to task_operations_path(task), :class => "pull-right" do
        = task.operations.where("done is true").size.to_s + " / " + task.operations.size.to_s
