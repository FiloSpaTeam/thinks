-# This file is part of Thinks.

-# Thinks is free software: you can redistribute it and/or modify
-# it under the terms of the GNU Affero Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.

-# Thinks is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Affero Public License for more details.

-# You should have received a copy of the GNU Affero Public License
-# along with Thinks.  If not, see <http://www.gnu.org/licenses/>.

-# Copyright (c) 2015, Claudio Maradonna

= render partial: 'shared/filters/layout', locals: { local_filters: [Enums::FiltersNames::STATUS], local_model: :tasks, local_text_field_name: 'search_title_and_description' }

-# TODO create breadcrumb filters
-#
-# .row
-#   .col-xs-5.col-sm-3.col-xs-offset-7.col-sm-offset-9.text-right

%table.table.table-sm
  %thead
    %tr
      %td{ colspan: 2 }
        .dropdown.col-xs-12.col-sm-7.col-md-7.col-lg-7
          %a#status-dropdown.btn.p-0.dropdown-toggle{ :type => "button", "data-toggle" => "dropdown", "aria-haspopup" => "true", "aria-expanded" => "true" }
            %strong
              = icon('fas', 'tasks', t( "tasks.table.th_task" ))
          = content_tag(:div, nil, :class => "dropdown-menu", "aria-labelledby" => "status-dropdown") do
            %h6.dropdown-header
              = t "tasks.table.header"
            - @statuses.each do |status|
              = link_to({ "filters[#{Enums::FiltersNames::STATUS}]" => status, remote: true }, class: 'dropdown-item small') do
                .round-sm.rounded.float-left.mt-1.mr-2{ :class => "bg-#{color_list_round_div(status.translation_code)}" }
                = t("tasks.statuses.#{status.translation_code}")
      - unless filter_value(Enums::FiltersNames::DELETED_AT)
        %td.text-center.col-xl-2.col-lg-3
          %strong
            = smart_listing.sortable icon('fas', 'caret-down', t('tasks.table.th_workload')), :workload
        %td.text-center.col-xl-2.col-lg-2
          %strong
            = smart_listing.sortable icon('fas', 'caret-down', t('tasks.table.th_view')), :impressions_count
      - else
        %td.col-lg-2
      %td{ width: 40 }
  %tbody
    - unless smart_listing.empty?
      - smart_listing.collection.each do |task|
        -# - if !@search.empty?
        -#   - tasks = tasks.sort_by{ |task| task.count_occurrences(@search); }.reverse
        %tr{ class: "bg-#{color_list_round_div(task.status.translation_code)}" }
          %td.d-none.d-sm-table-cell.td-task-status
          %td.bg-white
            .round-sm.float-left.status-div.d-sm-none{ :class => "bg-#{color_list_round_div(task.status.translation_code)}" }
            %strong.d-none.d-md-block
              %small.text-dark
                \##{task.serial}
                ·
                = std_deviation_button(task)
                - unless task.goal.nil?
                  ·
                  = goal_button(task)
                - if task.children.present?
                  ·
                  = children_button
              ·
              = link_to task.title, project_task_path(@project, task)
            %strong.d-sm-none
              = link_to task.title.truncate(45), project_task_path(@project, task), :title => task.title
            %strong.d-none.d-sm-block.d-md-none
              = std_deviation_button(task)
              ·
              = link_to task.title, project_task_path(@project, task)
            .text-dark.break-word
              %small
                %em
                  = highlights_searched_text(plain_text(task.description.squish).truncate(120), @search)
            - if task.deleted?
              .text-dark.hidden-xs
                %small
                  = t('tasks.table.tr.closed_at', deleted_at: task.deleted_at.to_s(:long))
            - else
              - if task.created_at == task.updated_at
                .text-dark.hidden-xxs
                  %small
                    = t('tasks.table.tr.created_at', created_at: task.created_at.to_s(:short), updater: task.updater.name).html_safe
              - else
                .text-dark.hidden-xxs
                  %small
                    = t('tasks.table.tr.updated_at', updated_at: task.updated_at.to_s(:short), updater: task.updater.name).html_safe
          - unless filter_value(Enums::FiltersNames::DELETED_AT)
            %td.bg-white.text-center.workload-table.align-middle
              = workload_description(task)
            %td.bg-white.text-center.hidden-xs.font-bold.align-middle
              = task.impressions_count

          - else
            %td.bg-white.align-middle.col-lg-2
              = link_to reopen_project_task_path(@project, task, :index => true), :method => 'put', title: 'Reopen', class: 'line-height-25 line-height-35' do
                = icon('fas', 'history', class: 'fa-lg')
                %span.hidden-xs
                  = t('tasks.table.action_reopen')
          %td.bg-white.align-middle.border-left
            .dropleft
              %a.btn.dropdown-toggle{ href: '#', role: 'button', "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": 'false', id: "dropdownMenuEdit#{ task.id }" }
                = icon('fas', 'bars', class: 'fa-sm')
              .dropdown-menu.dropdown-menu-left{ "aria-labelledby": "dropdownMenuEdit#{ task.id }" }
                = link_to icon('far', 'eye', t('show')), project_task_path(@project, task), class: 'dropdown-item small'
                = link_to icon('fas', 'edit', t('edit')), edit_project_task_path(@project, task), class: 'dropdown-item small'
                .dropdown-divider
                - if task.deleted?
                  = link_to icon('fas', 'eraser', t('delete')), project_task_path(@project, task), :method => 'delete', data: { confirm: t('are_you_sure') }, class: 'dropdown-item small'
                - elsif !task.done?
                  %a.dropdown-item.small{ role: "button", 'data-toggle': 'modal', href: "#modal-discard-task-#{ task.id }" }
                    = icon('fas', 'trash-alt', t('discards'))
                  - content_for :page_modals do
                    = render partial: 'tasks/modal_discard', locals: { task: task }
    - else
      %tr.warning
        %td.text-center{ colspan: 5 }
          %strong
            = t('tasks.table.no_results')

= smart_listing.paginate
= smart_listing.pagination_per_page_links
