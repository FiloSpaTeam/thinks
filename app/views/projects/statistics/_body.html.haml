-# This file is part of Thinks.

-# Thinks is free software: you can redistribute it and/or modify
-# it under the terms of the GNU Affero Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.

-# Thinks is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Affero Public License for more details.

-# You should have received a copy of the GNU Affero Public License
-# along with Thinks.  If not, see <http://www.gnu.org/licenses/>.

-# Copyright (c) 2015, Claudio Maradonna

#filterrific_results
  .form-group
    .col-xs-4.text-left
      %h4
        = @project.title
    .col-xs-offset-4.col-xs-4.text-right
      %h5
        = DateTime.now.to_s(:long)
  .row
    .col-xs-6
      .row
        %label.control-label.text-right.col-xs-4
          Name:
        %label.control-label.col-xs-8.label-normal
          = @local_thinker.name
      - if @local_thinker.sex.present?
        .row
          %label.control-label.text-right.col-xs-4
            Age:
          %label.control-label.col-xs-8.label-normal
            = @local_thinker.born_at.to_s(:long)
      - if @local_thinker.sex.present?
        .row
          %label.control-label.text-right.col-xs-4
            Gender:
          %label.control-label.col-xs-8.label-normal
            = t "sex.#{@local_thinker.sex.t_name}"
      .row
        %label.control-label.text-right.col-xs-4
          Joined at:
        %label.control-label.col-xs-8.label-normal
          = @local_thinker.created_at.to_s(:long)
    .col-xs-6{ style: 'border-left: 1px solid #EEE;' }
      .row
        %label.control-label.col-xs-5{ style: 'text-align: left;' }
          Sprint every
        %label.control-label.col-xs-7.label-normal
          = @project.cycle.try(:description) ? @project.cycle.description : t('not_defined_yet')
      .row
        %label.control-label.col-xs-5{ style: 'text-align: left;' }
          Release date
        %label.control-label.col-xs-7.label-normal
          = @project.release_at.try(:to_s) ? @project.release_at.to_s(:long) : t('not_defined_yet')
      .row
        %label.control-label.col-xs-5{ style: 'text-align: left;' }
          Team number
        %label.control-label.col-xs-7.label-normal
          = @project.assigned_roles.select(:thinker_id).distinct.count
      .row.visible-print-block
        %label.control-label.col-xs-5{ style: 'text-align: left;' }
          = t('projects.list.progress')
        %label.control-label.col-xs-7.label-normal
          = @project.progress_percentage
          \%
      .row
        %label.control-label.col-xs-12.label-normal
          .progress.hidden-print{ style: 'margin-bottom: 0;' }
            %div{"aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow" => "#{@project.progress_percentage}", :class => "progress-bar #{progress_bar_color(@project.progress_percentage)}", :role => "progressbar", :style => "min-width: 2em; width: #{@project.progress_percentage}%;"}
              = @project.progress_percentage
              \%
          %span.hidden-print
            = t('projects.list.progress')
  %hr
  - if @section && @section >= Projects::Statistic.sections[:s_first]
    %h3
      Section 1: Summary sprint about me
    .row
      - last_sprint     = @selected_sprint or @statistic.sprints.last.previous
      - previous_sprint = last_sprint.previous
      - previous_previous_sprint = nil
      - if previous_sprint.present?
        - previous_previous_sprint = previous_sprint.previous
      - tasks_done      = @statistic.tasks.done

      - tasks_done_last_sprint = tasks_done.where('end_at < ?', last_sprint.created_at).where('end_at >= ?', previous_sprint.try(:created_at))

      - tasks_in_progress = @statistic.tasks.in_progress
      - tasks_in_progress_last_sprint = tasks_in_progress.where('end_at < ?', last_sprint.created_at).where('end_at >= ?', previous_sprint.try(:created_at))
      .col-xs-4
        %h4.dark-grey
          %strong
            Average
        .row
          %label.col-xs-7
            Tasks done:
          %label.col-xs-5.label-normal
            - numbers_of_tasks = @statistic.sprints.collect { |sprint| sprint.project.tasks.where('end_at < ?', sprint.created_at).where('end_at >= ?', sprint.previous.try(:created_at)).count }
            - average_tasks_done = (numbers_of_tasks.inject{ |sum, el| sum + el }.to_f / numbers_of_tasks.size).round(1)
            - thinker_tasks_done = tasks_done.where(worker: @local_thinker)
            = "#{average_tasks_done} (#{((thinker_tasks_done.count * 100 / average_tasks_done) - 100).round(1)}%)"
        .row
          %label.col-xs-7
            Workload:
          %label.col-xs-5.label-normal
            - average_workload = @statistic.sprints.average(:obtained).round(2)
            = "#{average_workload} (#{((thinker_tasks_done.sum(:workload) * 100 / average_workload) - 100).round(1)}%)"

      .col-xs-4{ style: 'border-left: 1px solid #EEE;' }
        %h4.dark-grey
          %strong
            Last sprint
        = render partial: 'numeric_summary', locals: { sprint: last_sprint, tasks_done: tasks_done_last_sprint, tasks_in_progress: tasks_in_progress_last_sprint, average_tasks_done: average_tasks_done }

      .col-xs-4{ style: 'border-left: 1px solid #EEE;' }
        %h4.dark-grey
          %strong
            Previous sprint
        - if previous_previous_sprint.present?
          - tasks_done_previous_sprint = tasks_done.where('end_at < ?', previous_sprint.created_at).where('end_at >= ?', previous_previous_sprint.try(:created_at))
          - tasks_in_progress_previous_sprint = tasks_in_progress.where('end_at < ?', previous_sprint.created_at).where('end_at >= ?', previous_previous_sprint.try(:created_at))
          = render partial: 'numeric_summary', locals: { sprint: previous_sprint, tasks_done: tasks_done_previous_sprint, tasks_in_progress: tasks_in_progress_previous_sprint }
        - else
          %ul.list-group
            %li.list-group-item.list-group-item-warning
              = t ".related_info_limited"
    %hr
    %h3
      Section 1: Summary sprint compared to the other
    %hr
    %h3{ style: 'page-break-before: always;' }
      Section 1: Charts
    %hr
    %h4.chart
      Last sprint 'Burn up'
    - total_workload = 0
    - burn_up_data   = tasks_done_last_sprint.group_by_period(:day, :end_at).where('end_at >= ?', previous_sprint.created_at).where('end_at < ?', last_sprint.created_at).order('max(end_at)').sum(:workload)
    - if burn_up_data.empty?
      - burn_up_data = { last_sprint.created_at => 0 }
    - burn_up_data = burn_up_data.transform_keys { |key| key.strftime('%B %d') }
    .chart
      = area_chart burn_up_data.each { |key, value| burn_up_data[key] = total_workload += value }, library: { chartArea: { left: 25, width: '96%', height: '90%' }, hAxis: { textPosition: 'none' }, pointSize: 8, navigation: { buttonOptions: { enabled: false }}}
    %hr
    %h4.chart
      Previous sprint 'Burn up'
    - if previous_previous_sprint.present?
      - total_workload = 0
      - burn_up_data   = tasks_done_previous_sprint.group_by_period(:day, :end_at).where('end_at >= ?', previous_previous_sprint.created_at).where('end_at < ?', previous_sprint.created_at).order('max(end_at)').sum(:workload)
      - if burn_up_data.empty?
        - burn_up_data = { previous_sprint.created_at => 0 }
      - burn_up_data = burn_up_data.transform_keys { |key| key.strftime('%B %d') }
      = area_chart burn_up_data.each { |key, value| burn_up_data[key] = total_workload += value }, library: { chartArea: { left: 25, width: '96%', height: '90%' }, hAxis: { textPosition: 'none' }, pointSize: 8, navigation: { buttonOptions: { enabled: false }}}
    - else
      %ul.list-group
        %li.list-group-item.list-group-item-warning
          = t ".related_info_limited"
  - if @section && @section >= Projects::Statistic.sections[:s_second]
    %h3{ style: 'page-break-before: always;' }
      Section 2: Tasks done
    - if tasks_done_last_sprint.empty?
      %li.list-group-item.list-group-item-warning
        = t ".related_info_limited"
    - else
      - tasks_done_last_sprint.order('end_at DESC')
      - tasks_done_last_sprint.each do |task|
        %ul.list-group
          %li.list-group-item
            .text-center.float-right
              .col-xs-12.workload-table
                = workload_description(task)
            %small.dark-grey
              = task.end_at.to_s(:short)
              Â·
              = link_to task.title, task_path(task)
            .dark-grey
              %small
                %em
                  = plain_text(task.description.squish)
                  -# = markdown(task.description)
            .dark-grey
              %small
                %strong
                  \##{task.serial}
                  by #{task.thinker.name}
          %li.list-group-item.list-group-item-success
            = icon('fas', 'check-square-o', :class => 'fa-lg pull-left', :style => "margin-top: 3px;")
            - comment_approved = task.comments.approved.first
            = comment_approved.text
          %li.list-group-item.active
            = icon('fas', 'quote-left', :class => 'fa-lg pull-left', :style => "margin-top: 3px;")
            = comment_approved.reason.text
  - if @section && @section >= Projects::Statistic.sections[:s_third]
    %h3{ style: 'page-break-before: always;' }
      Section 3: Goals and releases
