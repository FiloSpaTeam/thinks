-# This file is part of Thinks.

-# Thinks is free software: you can redistribute it and/or modify
-# it under the terms of the GNU Affero Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.

-# Thinks is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Affero Public License for more details.

-# You should have received a copy of the GNU Affero Public License
-# along with Thinks.  If not, see <http://www.gnu.org/licenses/>.

-# Copyright (c) 2015, Claudio Maradonna

%li.list-group-item
  %a{ :role => "button", "data-toggle" => "collapse", "aria-expanded" => "false", "aria-controls" => "collapseThinker#{ member.thinker.id }_#{ member.team_role.id }", :href => "#collapseThinker#{ member.thinker.id }_#{ member.team_role.id }" }
    %strong
      = member.thinker.name
  - if member.thinker.avatar
    = cl_image_tag(member.thinker.avatar.path, { size: '30x30', class: 'pull-left team-member-img' })
  - else
    %img.team-member-img.float-left{ "data-src" => "holder.js/30x30" }
  .float-right
    - election_poll = election_polls.where(team_role: member.team_role).where(status: ElectionPoll.statuses[:active])
    - if election_poll.exists?
      - if member.thinker == current_thinker or !@project.part_of_team?(current_thinker)
        = icon('fas', 'warning', :class => "text-warning", :title => t('elections_in_progress'))
        - number_of_days = 21 - (DateTime.now - election_poll.first.created_at.to_datetime).to_i
        = t('remaining_days', days: number_of_days)
      - else
        %a{ :role => "button", "data-toggle" => "collapse", "aria-expanded" => "false", "aria-controls" => "collapseElectionPoll#{ election_poll.first.id }", :href => "#collapseElectionPoll#{ election_poll.first.id }" }
          = icon('fas', 'edit', :class => "dark-grey")
          - number_of_days = 21 - (DateTime.now - election_poll.first.created_at.to_datetime).to_i
          = t('remaining_days', days: number_of_days)
    - elsif member.thinker == current_thinker
      = link_to project_team_path(project_id: @project, id: member.thinker, team_role_id: member.team_role.id), :title => t('leave_the_team'), method: :delete, data: { confirm: t('are_you_sure_want_leave_team') } do
        = icon('fas', 'remove', :class => "text-danger")
    - if scrum_master?(@project) && current_thinker != member.thinker
      - ban = member.thinker.ban(@project)
      - if ban.present?
        = link_to unban_project_team_path(project_id: @project, id: member.thinker, team_role_id: member.team_role.id), :title => ban.reason, class: "btn-unlock" do
          = icon('fas', 'unlock-alt', :class => "text-warning", :style => "margin-left: 10px;")
      - else
        = link_to ban_project_team_path(project_id: @project, id: member.thinker, team_role_id: member.team_role.id), :title => t('ban_from_project'), class: "btn-lock" do
          = icon('fas', 'lock', :class => "text-danger", :style => "margin-left: 10px;")

    - if current_thinker != member.thinker
      - contribution = member.thinker.contributions.where(project: @project).first
      - if Contribution.intensities[contribution.intensity] == Contribution.intensities[:watching]
        = icon('fas', 'eye', :class => "text-primary", :style => "margin-left: 10px;", :title => "Watching")
      - elsif Contribution.intensities[contribution.intensity] == Contribution.intensities[:partecipate]
        = icon('fas', 'group', :class => "text-primary", :style => "margin-left: 10px;", :title => "Partecipating")
  - if election_poll.exists?
    .collapse{ id: "collapseElectionPoll#{ election_poll.first.id }", style: "margin-top: 20px; margin-bottom: 0px;" }
      - if @project.part_of_team?(current_thinker) and !election_poll.first.voters.where(thinker: current_thinker).exists?
        = form_for Voter.new, url: project_elect_path(project_id: @project.id), method: :put do |f|
          = f.hidden_field :election_poll_id, value: election_poll.first.id
          .form-group
            = f.label :thinker_id, t('.select_new_candidate')
            .input-group
              = f.select :elect_id, options_from_collection_for_select(team.where('thinker_id not in (?)', member.thinker.id).distinct.map(&:thinker), 'id', 'name'), {}, class: 'form-control'
              %span.input-group-btn
                = f.submit t('.candidate'), class: 'btn btn-primary', data: { confirm: 'Confirm your vote!' }
      - else
        .form-group
          %label.form-control
            = t('.you_voted_for')
            - elected = election_poll.first.voters.where(thinker: current_thinker).first.elect
            - if elected == current_thinker
              = t('yourself')
            - else
              = elected.name
  .collapse{ id: "collapseThinker#{ member.thinker.id }_#{ member.team_role.id }", style: "margin-top: 20px; margin-bottom: 0px;" }
    - working_tasks = member.thinker.working_tasks.where(project: @project).where(status: Status.done.first)
    - if working_tasks.size.nonzero?
      - more_than_five = (working_tasks.size > 5)
      %ul.list-group
        - working_tasks.order('workload desc').order('updated_at desc').limit(5).each do |task|
          %li.list-group-item
            = "##{ task.serial }"
            = link_to task.title, task, :title => task.updated_at.to_s(:short)
            = badge(task.workload)
        - if more_than_five
          %li.list-group-item.text-right
            %strong
              = '...'
        %li.list-group-item
          %strong
            Total workload
          = badge(working_tasks.sum(:workload))
    - else
      %strong
        No tasks done

